@page "/Admin/CreateBank";
@using MetaMask.Blazor;
@using MetaMask.Blazor.Enums;
@using MetaMask.Blazor.Exceptions;
@using Nethereum.ABI.FunctionEncoding;
@using Nethereum.ABI.Model;
@using SeamLessCustomerOnboarding.Models;
@using System.Numerics;
@using Microsoft.Extensions.Logging
@using SeamLessCustomerOnboarding.Models.Admin
@inject SeamLessCustomerOnboarding.Models.MetaMaskService serviceMetaMask;
@inject NavigationManager Navigation

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedSessionStorage ProtectedSessionStore;
@inject MailService servicemail;
<div class="row justify-content-center">
    <div class="col-md-10">
        <div class="card mt-3 mb-3">
          
            <div class="card-body">

                <h3 style="color:black">Add Bank To Network</h3>
                <EditForm Model="@bank" OnValidSubmit="HandleSubmit">

                            <DataAnnotationsValidator />
                            <ValidationSummary />
                    <div class="form-group row">
                        <label style="color:black" class="control-label col-md-12">Name</label>
                        <div class="col">
                                    <InputText class="form-control" @bind-Value="bank.Name" />
                                    <ValidationMessage For="() => bank.Name" />
                        </div>
                               
                             
                    </div>
                            <div class="form-group row">
                               

                                <div class="col">
                                    <label style="color:black" class="control-label col-md-12">Email</label>

                                    <InputText class="form-control" @bind-Value="bank.Email" />
                                    <ValidationMessage For="() => bank.Email" />
                                </div>
                            </div>
                    <div class="form-group row">
                        <label style="color:black" class="control-label col-md-12">Ethereum Private Key</label>
                        <div class="col">
                            <InputText class="form-control" @bind-Value="bank.MetaMaskKey" />
                                    <ValidationMessage For="() => bank.MetaMaskKey" />
                        </div>
                    </div>
                    <p></p>
                            <div class="form-group row" align="right">
                                <button type="submit" class="btn btn-success">Submit</button>
                            </div>


                </EditForm>
            </div>
        </div>
    </div>
</div>

@code{
    public string addressSelect;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {


            serviceMetaMask.InitializeMetaMask();


            bool isSiteConnected = await serviceMetaMask.isConnected();
            if (isSiteConnected)
            {
                addressSelect = await serviceMetaMask.GetSelectedAddress();
                await ProtectedSessionStore.SetAsync("key",serviceMetaMask.getAddress());
            }
            await ProtectedSessionStore.SetAsync("Role", "Admin");




            StateHasChanged();
        }
    }
    BankInfo bank = new();



    private async Task HandleSubmit()
    {
        var isMetaConnect = await serviceMetaMask.isConnected();
        if(isMetaConnect)
        {
            var messsenderAddress = serviceMetaMask.getAddress();

            //save to blockchain
            MailRequest request = new MailRequest();
            request.Subject = "Connect To Ethereum BlockChain";
            request.Body = "";
            request.ToEmail = bank.Email;
            await  servicemail.SendEmailAsync(request, bank.Name, bank.MetaMaskKey,bank.Name);

            Navigation.NavigateTo("Index");


        }
    }

    public void Dispose()
    {
        serviceMetaMask.Dispose();
    }

   

}